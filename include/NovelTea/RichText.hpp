// Taken from: https://github.com/skyrpex/RichText
#ifndef NOVELTEA_RICHTEXT_HPP
#define NOVELTEA_RICHTEXT_HPP

//////////////////////////////////////////////////////////////////////////
// Headers
//////////////////////////////////////////////////////////////////////////
#include <vector>

#include <SFML/Graphics/Drawable.hpp>
#include <SFML/Graphics/Color.hpp>
#include <SFML/Graphics/Text.hpp>
#include <SFML/System/Vector2.hpp>
#include <NovelTea/TweenObjects.hpp>

namespace NovelTea
{

class RichText : public sf::Drawable, public TweenTransformable<sf::Transformable>
{
public:
    //////////////////////////////////////////////////////////////////////////
    // Nested class that represents a single line
    //////////////////////////////////////////////////////////////////////////
	class Line : public TweenTransformable<sf::Transformable>, public sf::Drawable
    {
    public:
        //////////////////////////////////////////////////////////////////////
        // Set character size
        //////////////////////////////////////////////////////////////////////
        void setCharacterSize(unsigned int size);

        //////////////////////////////////////////////////////////////////////
        // Set font
        //////////////////////////////////////////////////////////////////////
		void setFont(const sf::Font &font);

        //////////////////////////////////////////////////////////////////////
        // Get texts
        //////////////////////////////////////////////////////////////////////
		std::vector<TweenText> &getTexts() const;

        //////////////////////////////////////////////////////////////////////
        // Append text
        //////////////////////////////////////////////////////////////////////
		void appendText(TweenText text);

        //////////////////////////////////////////////////////////////////////
        // Get local bounds
        //////////////////////////////////////////////////////////////////////
		sf::FloatRect getLocalBounds() const;

        //////////////////////////////////////////////////////////////////////
        // Get global bounds
        //////////////////////////////////////////////////////////////////////
		sf::FloatRect getGlobalBounds() const;

		void setOpacity(sf::Uint8 alpha);
		sf::Uint8 getOpacity() const;

    protected:
        //////////////////////////////////////////////////////////////////////
        // Draw
        //////////////////////////////////////////////////////////////////////
		void draw(sf::RenderTarget &target, sf::RenderStates states) const override;

    private:
        //////////////////////////////////////////////////////////////////////
        // Update geometry
        //////////////////////////////////////////////////////////////////////
        void updateGeometry() const;

        //////////////////////////////////////////////////////////////////////
        // Update geometry for a given text
        //////////////////////////////////////////////////////////////////////
		void updateTextAndGeometry(TweenText &text) const;

        //////////////////////////////////////////////////////////////////////
        // Member data
        //////////////////////////////////////////////////////////////////////
		mutable std::vector<TweenText> m_texts; ///< List of texts
		mutable sf::FloatRect m_bounds;        ///< Local bounds
    };

    //////////////////////////////////////////////////////////////////////////
    // Constructor
    //////////////////////////////////////////////////////////////////////////
	RichText(const sf::Vector2f &size);

    //////////////////////////////////////////////////////////////////////////
    // Constructor
    //////////////////////////////////////////////////////////////////////////
	RichText(const sf::Vector2f &size, const sf::Font &font);

    //////////////////////////////////////////////////////////////////////////
    // Operators
    //////////////////////////////////////////////////////////////////////////
	RichText & operator << (const sf::Color &color);
	RichText & operator << (sf::Text::Style style);
	RichText & operator << (const sf::String &string);

    //////////////////////////////////////////////////////////////////////////
    // Set character size
    //////////////////////////////////////////////////////////////////////////
    void setCharacterSize(unsigned int size);

    //////////////////////////////////////////////////////////////////////////
    // Set font
    //////////////////////////////////////////////////////////////////////////
	void setFont(const sf::Font &font);

	void setOpacity(sf::Uint8 alpha);
	sf::Uint8 getOpacity() const;

    //////////////////////////////////////////////////////////////////////////
    // Clear
    //////////////////////////////////////////////////////////////////////////
    void clear();

    //////////////////////////////////////////////////////////////////////////
    // Get text list
    //////////////////////////////////////////////////////////////////////////
    const std::vector<Line> &getLines() const;

    //////////////////////////////////////////////////////////////////////////
    // Get character size
    //////////////////////////////////////////////////////////////////////////
    unsigned int getCharacterSize() const;

    //////////////////////////////////////////////////////////////////////////
    // Get font
    //////////////////////////////////////////////////////////////////////////
	const sf::Font *getFont() const;

    //////////////////////////////////////////////////////////////////////////
    // Get local bounds
    //////////////////////////////////////////////////////////////////////////
	sf::FloatRect getLocalBounds() const;

    //////////////////////////////////////////////////////////////////////////
    // Get global bounds
    //////////////////////////////////////////////////////////////////////////
	sf::FloatRect getGlobalBounds() const;

	sf::Vector2f getSize() const;

protected:
    //////////////////////////////////////////////////////////////////////////
    // Render
    //////////////////////////////////////////////////////////////////////////
	void draw(sf::RenderTarget &target, sf::RenderStates states) const override;

private:
    //////////////////////////////////////////////////////////////////////////
    // Delegate constructor
    //////////////////////////////////////////////////////////////////////////
	RichText(const sf::Vector2f &size, const sf::Font *font);

    //////////////////////////////////////////////////////////////////////////
	// Creates a sf::Text instance using the current styles
    //////////////////////////////////////////////////////////////////////////
	TweenText createText(const sf::String &string) const;

	sf::String createWrappedString(const sf::String &string) const;

    //////////////////////////////////////////////////////////////////////////
    // Update geometry
    //////////////////////////////////////////////////////////////////////////
    void updateGeometry() const;

    //////////////////////////////////////////////////////////////////////////
    // Member data
    //////////////////////////////////////////////////////////////////////////
    mutable std::vector<Line> m_lines;  ///< List of lines
	const sf::Font *m_font;         ///< Font
    unsigned int m_characterSize;       ///< Character size
	mutable sf::FloatRect m_bounds; ///< Local bounds

	sf::Color m_currentColor;       ///< Last used color
	TweenText::Style m_currentStyle; ///< Last style used
	sf::Vector2f m_size;

	sf::RectangleShape m_debugBorder;
};

} // namespace NovelTea

#endif // NOVELTEA_RICHTEXT_HPP
